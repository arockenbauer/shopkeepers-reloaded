plugins {
	id 'java-library'
	id 'maven-publish'
	id 'com.gradleup.shadow'
}

def nmsModules = [
	':shopkeepers-v1_20_R5',
	':shopkeepers-v1_21_R1',
	':shopkeepers-v1_21_R2',
	':shopkeepers-v1_21_R3',
	':shopkeepers-v1_21_R4',
	':shopkeepers-v1_21_R5',
	':shopkeepers-v1_21_R5_paper',
	':shopkeepers-v1_21_R6',
	':shopkeepers-v1_21_R6_paper',
	':shopkeepers-v1_21_R7',
	':shopkeepers-v1_21_R7_paper'
]

configurations {
	shaded
}

dependencies {
	api project(':shopkeepers-main') // Includes the Shopkeepers API
	// Separate 'shaded' configuration: Omits these dependencies from the transitively inherited
	// apiElements and runtimeElements (as well as from the generated POM).
	// We cannot use compileOnly for this, because the java-library plugin would then cause this
	// module to depend on the compiled classes (compileJava task) instead of the final jar (jar
	// task). This would affect the order in which these dependency tasks are executed during a
	// build, and would also cause the shadowJar task to bundle the non-remapped classes instead of
	// the remapped ones.
	nmsModules.each { module ->
		shaded project(path: module, configuration: 'remapped')
	}
}

jar {
	// We only require the output of the shadowJar task.
	enabled = false
}

shadowJar {
	configureJarTaskWithMavenMetadata(project, it)
	// No classifier: Replaces the normal classifier-less jar file (if there is one).
	archiveClassifier = ''
	configurations = [project.configurations.runtimeClasspath, project.configurations.shaded]
	dependencies {
		include(project(':shopkeepers-api'))
		include(project(':shopkeepers-main'))
		nmsModules.each { module ->
			include(project(path: module, configuration: 'remapped'))
		}
	}
	manifest {
		// TODO Change this to 'mojang' once we use Mojang mappings for the Paper modules and no
		// longer share modules across Paper and Spigot.
		attributes["paperweight-mappings-namespace"] = "spigot"
	}
}

configureShadowArtifacts(project)

// Copies the final plugin jar into the build folder of the root project.
task copyResults(type: Copy) {
	from shadowJar
	into rootProject.buildDir
}

assemble {
	dependsOn shadowJar
	dependsOn copyResults
}

publishing {
	publications {
		mavenJava(MavenPublication) { publication ->
			configureShadowMavenPublication(project, publication)
		}
	}
}
